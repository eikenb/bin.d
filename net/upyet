#!/bin/sh

# Author: John Eikenberry <jae@zhar.net>

# License: CC0 <http://creativecommons.org/publicdomain/zero/1.0/>

# Random IPs to test against
yahoo=$(dig +short yahoo.com)
google=$(dig +short google.com)
level3=4.0.0.8

# sound files to use for notifications
upsound=~/.themes/sounds/itsawak2.wav
downsound=~/.themes/sounds/thunder.wav


# defaults
IP=$google
flip=
exit_dev=
simpleping=
count=1
interval=1
timeout=2
cmd=`basename $0`
delay=1
adapt=
quiet=
vol=5

ARGS="$@"
usage () {
    echo "usage: $cmd [options] [IP/Domain]"
    echo "-i ping interval"
    echo "-s sleep delay"
    echo "-q quiet (no sounds)"
    echo "-f flip to [up|down]yet when [up|down] changes"
    echo "-e exit if network device changes"
    if [ "$cmd" = "upyet" ]; then
        echo "-p ping"
        echo "-c N count N times"
        echo "-A use Adaptive ping"
    else
        echo '-t response timeout'
    fi
    echo "-y yahoo IP"
    echo "-g google IP (default)"
    echo "-l Level3 IP"
    echo "-m HOST - use HOST as ping target"
    echo "-v 1-10 - volume - 10 normal, 1 almost silent"
    exit 0
}

while getopts Aaglhm:pfeqyi:c:t:s:v: arg; do
    case $arg in
        A) adapt=true; shift;;
        p) simpleping=true; [ $count -eq 1 ] && count= ; shift;;
        c) count=$OPTARG; shift; shift;;
        i) interval=$OPTARG; shift; shift;;
        f) flip=true; shift;;
        e) exit_dev=true; shift;;
        q) quiet=true; shift;;
        m) IP=$OPTARG; shift; shift;;
        v) vol=$OPTARG; shift; shift;;
        l) IP=$level3; shift;;
        g) IP=$google; shift;;
        y) IP=$yahoo; shift;;
        t|w) timeout=$OPTARG; shift; shift;;
        s|d) delay=$OPTARG; shift; shift;;
        h) usage;;
    esac
done

vol=$( echo "$vol/10." | bc -l)

# non-flagged arg is IP/host
[ -n "$1" ] && IP=$1

ERR="\033[0;31m"
HIT="\033[1;32m"
RST="\033[0m"

report () {
    echo "$cmd:\tpings:\t$total\tmisses:$totalmiss"
    trap '' 0
    [ "$1" = "exit" ] && exit
}

exit_on_dev_change () {
    if [ -z "$dev" ]; then
        dev=$(ip link show up | grep -o '\(eth[0-9]\|wlan[0-9]\)')
    else
        test=$(ip link show up | grep -o '\(eth[0-9]\|wlan[0-9]\)')
        [ "$dev" = "$test" ] || { echo "device changed"; sleep 1; exit; }
    fi
}

ping='/bin/ping'

if [ "$cmd" = "downyet" ]; then
    trap 'report exit' 0 2
    miss=0
    total=0
    totalmiss=0
    until [ $miss -ge 3 ]; do
        total=$(($total + 1))
        if ! out=$($ping -W $timeout -c $count $IP); then
            miss=$(($miss + 1))
            totalmiss=$(($totalmiss + 1))
            echo "${ERR}"`date`"${RST}";
        else
            miss=0
            echo -n "${HIT}"`date`"${RST}  --  ";
            echo -n "$out" | grep -o "time=[0-9.]\+"
        fi
        sleep $delay;
        [ -n "$exit_dev" ] && exit_on_dev_change
    done

    if [ -n "$flip" ]; then
        [ -n "$quiet" ] || /usr/bin/play -v $vol -q $downsound &
        echo "${ERR}-------------------- DOWN --------------------${RST}"
        report
        sleep $delay;
        exec upyet $ARGS
    else
        report
        [ -n "$quiet" ] || exec /usr/bin/play -v $vol -q $downsound
    fi
else
    ping="$ping -i $interval"
    [ "$adapt" = "true" ] && ping="$ping -A"

    if [ -n "$simpleping" ] ; then
        if [ -n "$count" ]; then
            echo $ping -c $count $IP
            $ping -c $count $IP
        else
            $ping $IP
        fi
    else
        until $ping -q -c $count $IP > /dev/null; do
            sleep $delay;
            echo "${ERR}$(date) -- 100% packet loss${RST}"
            [ -n "$exit_dev" ] && exit_on_dev_change
        done

        echo "${HIT}-------------------- UP --------------------${RST}"
        if [ -n "$flip" ]; then
            [ -n "$quiet" ] || /usr/bin/play -v $vol -q  $upsound &
            exec downyet $ARGS
        else
            [ -n "$quiet" ] \
                || exec /usr/bin/play -v $vol -q $upsound
        fi
    fi
fi

#/usr/bin/aplay /usr/local/share/sounds/hamster.au;
## vim: expandtab
